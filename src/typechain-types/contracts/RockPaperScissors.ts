/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace GameContext {
  export type ContextDataStruct = {
    waitingForOpponentTimeout: BigNumberish;
    moveTimeout: BigNumberish;
    scoreThreshold: BigNumberish;
    roundThreshold: BigNumberish;
    ownerTipRate: BigNumberish;
    referralTipRate: BigNumberish;
    claimTimeout: BigNumberish;
  };

  export type ContextDataStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ] & {
    waitingForOpponentTimeout: number;
    moveTimeout: number;
    scoreThreshold: number;
    roundThreshold: number;
    ownerTipRate: number;
    referralTipRate: number;
    claimTimeout: number;
  };
}

export declare namespace RockPaperScissors {
  export type PlayerStruct = {
    adr: string;
    score: BigNumberish;
    hashedMove: BytesLike;
    move: BytesLike;
  };

  export type PlayerStructOutput = [string, number, string, string] & {
    adr: string;
    score: number;
    hashedMove: string;
    move: string;
  };

  export type GameStruct = {
    challenger: RockPaperScissors.PlayerStruct;
    opponent: RockPaperScissors.PlayerStruct;
    pot: BigNumberish;
    updateTimestamp: BigNumberish;
    acceptBlockNumber: BigNumberish;
    validateBlockNumber: BigNumberish;
    passwordHash: BytesLike;
    state: BigNumberish;
    round: BigNumberish;
    referral: string;
    winner: string;
    contextIndex: BigNumberish;
  };

  export type GameStructOutput = [
    RockPaperScissors.PlayerStructOutput,
    RockPaperScissors.PlayerStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    number,
    string,
    string,
    BigNumber
  ] & {
    challenger: RockPaperScissors.PlayerStructOutput;
    opponent: RockPaperScissors.PlayerStructOutput;
    pot: BigNumber;
    updateTimestamp: BigNumber;
    acceptBlockNumber: BigNumber;
    validateBlockNumber: BigNumber;
    passwordHash: string;
    state: number;
    round: number;
    referral: string;
    winner: string;
    contextIndex: BigNumber;
  };

  export type GameWrapperStruct = {
    game: RockPaperScissors.GameStruct;
    context: GameContext.ContextDataStruct;
    timestamp: BigNumberish;
  };

  export type GameWrapperStructOutput = [
    RockPaperScissors.GameStructOutput,
    GameContext.ContextDataStructOutput,
    BigNumber
  ] & {
    game: RockPaperScissors.GameStructOutput;
    context: GameContext.ContextDataStructOutput;
    timestamp: BigNumber;
  };
}

export interface RockPaperScissorsInterface extends utils.Interface {
  functions: {
    "abortGame(uint256)": FunctionFragment;
    "acceptGame(uint256,string)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "claimPot(uint256)": FunctionFragment;
    "getCurrentContext()": FunctionFragment;
    "getGame(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "referrals(address)": FunctionFragment;
    "registerReferral()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startNewGame(address,bytes32)": FunctionFragment;
    "submitHashedMove(uint256,bytes32)": FunctionFragment;
    "submitMove(uint256,bytes32)": FunctionFragment;
    "surrenderGame(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateContext((uint32,uint32,uint32,uint32,uint32,uint32,uint32))": FunctionFragment;
    "withraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "abortGame"
      | "acceptGame"
      | "balances"
      | "claimPot"
      | "getCurrentContext"
      | "getGame"
      | "owner"
      | "referrals"
      | "registerReferral"
      | "renounceOwnership"
      | "startNewGame"
      | "submitHashedMove"
      | "submitMove"
      | "surrenderGame"
      | "transferOwnership"
      | "updateContext"
      | "withraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "abortGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGame",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimPot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentContext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "referrals", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerReferral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startNewGame",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitHashedMove",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMove",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "surrenderGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContext",
    values: [GameContext.ContextDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "withraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "abortGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimPot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "referrals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNewGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitHashedMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitMove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "surrenderGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withraw", data: BytesLike): Result;

  events: {
    "ContextUpdate(uint256)": EventFragment;
    "GameUpdated(uint256,uint8)": EventFragment;
    "NewReferral(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ValidatedMoves(uint256,uint8,uint8,uint8)": EventFragment;
    "Withraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContextUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatedMoves"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withraw"): EventFragment;
}

export interface ContextUpdateEventObject {
  newIndex: BigNumber;
}
export type ContextUpdateEvent = TypedEvent<
  [BigNumber],
  ContextUpdateEventObject
>;

export type ContextUpdateEventFilter = TypedEventFilter<ContextUpdateEvent>;

export interface GameUpdatedEventObject {
  gameId: BigNumber;
  state: number;
}
export type GameUpdatedEvent = TypedEvent<
  [BigNumber, number],
  GameUpdatedEventObject
>;

export type GameUpdatedEventFilter = TypedEventFilter<GameUpdatedEvent>;

export interface NewReferralEventObject {
  ref: string;
}
export type NewReferralEvent = TypedEvent<[string], NewReferralEventObject>;

export type NewReferralEventFilter = TypedEventFilter<NewReferralEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ValidatedMovesEventObject {
  gameId: BigNumber;
  round: number;
  challengerMove: number;
  opponentMove: number;
}
export type ValidatedMovesEvent = TypedEvent<
  [BigNumber, number, number, number],
  ValidatedMovesEventObject
>;

export type ValidatedMovesEventFilter = TypedEventFilter<ValidatedMovesEvent>;

export interface WithrawEventObject {
  adr: string;
  amount: BigNumber;
}
export type WithrawEvent = TypedEvent<[string, BigNumber], WithrawEventObject>;

export type WithrawEventFilter = TypedEventFilter<WithrawEvent>;

export interface RockPaperScissors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RockPaperScissorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    abortGame(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptGame(
      gameId: BigNumberish,
      password: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimPot(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentContext(
      overrides?: CallOverrides
    ): Promise<[GameContext.ContextDataStructOutput]>;

    getGame(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[RockPaperScissors.GameWrapperStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    referrals(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    registerReferral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startNewGame(
      referral: string,
      passwordHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitHashedMove(
      gameId: BigNumberish,
      hashedMove: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitMove(
      gameId: BigNumberish,
      move: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    surrenderGame(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateContext(
      context: GameContext.ContextDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  abortGame(
    gameId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptGame(
    gameId: BigNumberish,
    password: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimPot(
    gameId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentContext(
    overrides?: CallOverrides
  ): Promise<GameContext.ContextDataStructOutput>;

  getGame(
    gameId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<RockPaperScissors.GameWrapperStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  referrals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  registerReferral(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startNewGame(
    referral: string,
    passwordHash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitHashedMove(
    gameId: BigNumberish,
    hashedMove: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitMove(
    gameId: BigNumberish,
    move: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  surrenderGame(
    gameId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateContext(
    context: GameContext.ContextDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withraw(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    abortGame(gameId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    acceptGame(
      gameId: BigNumberish,
      password: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimPot(gameId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getCurrentContext(
      overrides?: CallOverrides
    ): Promise<GameContext.ContextDataStructOutput>;

    getGame(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RockPaperScissors.GameWrapperStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    referrals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    registerReferral(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startNewGame(
      referral: string,
      passwordHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitHashedMove(
      gameId: BigNumberish,
      hashedMove: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitMove(
      gameId: BigNumberish,
      move: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    surrenderGame(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateContext(
      context: GameContext.ContextDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ContextUpdate(uint256)"(newIndex?: null): ContextUpdateEventFilter;
    ContextUpdate(newIndex?: null): ContextUpdateEventFilter;

    "GameUpdated(uint256,uint8)"(
      gameId?: BigNumberish | null,
      state?: BigNumberish | null
    ): GameUpdatedEventFilter;
    GameUpdated(
      gameId?: BigNumberish | null,
      state?: BigNumberish | null
    ): GameUpdatedEventFilter;

    "NewReferral(address)"(ref?: string | null): NewReferralEventFilter;
    NewReferral(ref?: string | null): NewReferralEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ValidatedMoves(uint256,uint8,uint8,uint8)"(
      gameId?: BigNumberish | null,
      round?: null,
      challengerMove?: null,
      opponentMove?: null
    ): ValidatedMovesEventFilter;
    ValidatedMoves(
      gameId?: BigNumberish | null,
      round?: null,
      challengerMove?: null,
      opponentMove?: null
    ): ValidatedMovesEventFilter;

    "Withraw(address,uint256)"(
      adr?: string | null,
      amount?: null
    ): WithrawEventFilter;
    Withraw(adr?: string | null, amount?: null): WithrawEventFilter;
  };

  estimateGas: {
    abortGame(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptGame(
      gameId: BigNumberish,
      password: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimPot(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentContext(overrides?: CallOverrides): Promise<BigNumber>;

    getGame(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    referrals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerReferral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startNewGame(
      referral: string,
      passwordHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitHashedMove(
      gameId: BigNumberish,
      hashedMove: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitMove(
      gameId: BigNumberish,
      move: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    surrenderGame(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateContext(
      context: GameContext.ContextDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    abortGame(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptGame(
      gameId: BigNumberish,
      password: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimPot(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGame(
      gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referrals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerReferral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startNewGame(
      referral: string,
      passwordHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitHashedMove(
      gameId: BigNumberish,
      hashedMove: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitMove(
      gameId: BigNumberish,
      move: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    surrenderGame(
      gameId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateContext(
      context: GameContext.ContextDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
