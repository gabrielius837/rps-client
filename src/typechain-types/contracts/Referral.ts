/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ReferralInterface extends utils.Interface {
  functions: {
    "referrals(address)": FunctionFragment;
    "registerReferral()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "referrals" | "registerReferral"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "referrals", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerReferral",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "referrals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerReferral",
    data: BytesLike
  ): Result;

  events: {
    "NewReferral(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewReferral"): EventFragment;
}

export interface NewReferralEventObject {
  ref: string;
}
export type NewReferralEvent = TypedEvent<[string], NewReferralEventObject>;

export type NewReferralEventFilter = TypedEventFilter<NewReferralEvent>;

export interface Referral extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReferralInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    referrals(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    registerReferral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  referrals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  registerReferral(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    referrals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    registerReferral(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewReferral(address)"(ref?: string | null): NewReferralEventFilter;
    NewReferral(ref?: string | null): NewReferralEventFilter;
  };

  estimateGas: {
    referrals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerReferral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    referrals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerReferral(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
